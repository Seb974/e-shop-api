# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    pics_directory: '%kernel.project_dir%/public/uploads/pictures'
    app.path.picture: /uploads/pictures

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\Mercure\JwtProvider:
        arguments:
            $key: '%env(MERCURE_JWT_KEY)%'

    App\Service\Mercure\CookieGenerator:
        arguments:
            $key: '%env(MERCURE_JWT_KEY)%'
            $domain: '%env(SERVER_DOMAIN)%'
            $path: '%env(MERCURE_PATH)%'
            $tokenTTL: '%env(JWT_TOKEN_TTL)%'
            $cookieDomain: '%env(STRICT_DOMAIN)%'
            $cookieSecure: '%env(COOKIE_SECURE)%'

    App\Service\JwtAuthentication\CookieGenerator:
        arguments:
            $tokenTTL: '%env(JWT_TOKEN_TTL)%'
            $cookieDomain: '%env(STRICT_DOMAIN)%'
            $cookieSecure: '%env(COOKIE_SECURE)%'

    App\Service\CookieCleaner\CookieCleaner:
        arguments:
            $mercurePath: '%env(MERCURE_PATH)%'
            $cookieDomain: '%env(STRICT_DOMAIN)%'

    App\Service\Stripe\Stripe:
        arguments:
            $secretKey: '%env(STRIPE_SECRET_KEY)%'

    App\Service\User\UserGroupDefiner:
        arguments:
            $requestStack: '@request_stack'
            $admin: '%env(ADMIN_DOMAIN)%'

    App\Doctrine\CurrentUserExtension:
        arguments:
            $requestStack: '@request_stack'
            $admin: '%env(ADMIN_DOMAIN)%'
            $public: '%env(PUBLIC_DOMAIN)%'

    App\Doctrine\CurrentAdminExtension:
        arguments:
            $requestStack: '@request_stack'
            $admin: '%env(ADMIN_DOMAIN)%'
            $public: '%env(PUBLIC_DOMAIN)%'

    App\EventSubscriber\Authentication\JwtCreationSubscriber:
        # arguments: [ '@request_stack' ]
        arguments:
            $requestStack: '@request_stack'
            $admin: '%env(ADMIN_DOMAIN)%'
            $public: '%env(PUBLIC_DOMAIN)%'
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: updateJwtData }

    App\EventSubscriber\Authentication\AuthenticationSuccessSubscriber :
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess, priority: -2 }

    App\EventSubscriber\Authentication\LogoutSuccessSubscriber:
        tags:
            - { name: 'kernel.event_listener', event: 'Symfony\Component\Security\Http\Event\LogoutEvent', dispatcher: security.event_dispatcher.main, method: onLogoutSuccess }

    acme_api.event.jwt_decoded_listener:
        class: App\EventSubscriber\Authentication\JWTDecodedListener
        # arguments: [ '@request_stack' ]
        arguments:
            $requestStack: '@request_stack'
            $admin: '%env(ADMIN_DOMAIN)%'
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }

    App\EventSubscriber\Order\OrderCreationSubscriber:
        arguments:
            $admin: '%env(ADMIN_DOMAIN)%'
            $public: '%env(PUBLIC_DOMAIN)%'

    App\EventSubscriber\Response\ResponseSubscriber:
        arguments:
            $server: '%env(SERVER_DOMAIN)%'
            $admin: '%env(ADMIN_DOMAIN)%'
            $public: '%env(PUBLIC_DOMAIN)%'

    App\EventSubscriber\Product\SerializeSubscriber:
        arguments:
            $admin: '%env(ADMIN_DOMAIN)%'
            $server: '%env(SERVER_DOMAIN)%'

    App\Serializer\OrderEntityContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\OrderEntityContextBuilder.inner' ]
        autoconfigure: false

    App\Serializer\ItemContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\ItemContextBuilder.inner' ]
        autoconfigure: false

    App\Service\Sms\Sms:
        arguments:
            $url: '%env(SMS_URL)%'
            $user: '%env(SMS_USER)%'
            $pass: '%env(SMS_PASS)%'

    App\Service\Chronopost\Shipping:
        arguments:
            $password: '%env(CHRONOPOST_ACCOUNT_PASSWORD)%'
            $contractNumber: '%env(CHRONOPOST_CONTRACT_NUMBER)%'
            $accountNumber: '%env(CHRONOPOST_ACCOUNT_NUMBER)%'

    App\Service\Chronopost\Tracking:
        arguments:
            $rootPath: '%kernel.project_dir%'
            $password: '%env(CHRONOPOST_ACCOUNT_PASSWORD)%'
            $accountNumber: '%env(CHRONOPOST_ACCOUNT_NUMBER)%'

    App\Service\Axonaut\User:
        arguments:
            $key: '%env(AXONAUT_API_KEY)%'
            $domain: '%env(AXONAUT_DOMAIN)%'

    App\Service\Axonaut\Product:
        arguments:
            $key: '%env(AXONAUT_API_KEY)%'
            $domain: '%env(AXONAUT_DOMAIN)%'

    App\Service\Axonaut\Container:
        arguments:
            $key: '%env(AXONAUT_API_KEY)%'
            $domain: '%env(AXONAUT_DOMAIN)%'

    App\Service\Axonaut\Invoice:
        arguments:
            $key: '%env(AXONAUT_API_KEY)%'
            $domain: '%env(AXONAUT_DOMAIN)%'

    App\Service\Axonaut\Supplier:
        arguments:
            $key: '%env(AXONAUT_API_KEY)%'
            $domain: '%env(AXONAUT_DOMAIN)%'

    App\Service\Axonaut\Expense:
        arguments:
            $key: '%env(AXONAUT_API_KEY)%'
            $domain: '%env(AXONAUT_DOMAIN)%'

    App\EventSubscriber\Picture\ImgIXUrlBuilder:
        arguments:
            $key: '%env(IMGIX_TOKEN_KEY)%'
            $domain: '%env(IMGIX_DOMAIN)%'
